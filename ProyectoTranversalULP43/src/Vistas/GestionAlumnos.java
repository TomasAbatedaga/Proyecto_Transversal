/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vistas;

import com.toedter.calendar.JDateChooser;
import AccesoADatos.AlumnoData;
import java.awt.Color;
import java.awt.Font;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import proyectotranversalulp.Entidades.Alumno;

/**
 *
 * @author Abel
 */
public class GestionAlumnos extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    //ArrayList<Alumno> listaAlumnos=null;
    List<Alumno> listaAlumnos = null;
    AlumnoData abmData = new AlumnoData();
    Alumno temp = null;

    /**
     * Creates new form GestionAlumnos
     */
    public GestionAlumnos() {
        initComponents();
        camposInicial();
        armarTabla();
        cargoCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtablaAlumnoResultado = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jtAlumnoDNI = new javax.swing.JTextField();
        jbtAlumnoNuevo = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabelAlumnoID = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtAlumnoNom = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtAlumnoApe = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jcbAlumnoEstado = new javax.swing.JComboBox<>();
        jbtAlumnoAgregar = new javax.swing.JButton();
        jbtAlumnoModificar = new javax.swing.JButton();
        jbtAlumnoCancelar = new javax.swing.JButton();
        jEtiquetaNom = new javax.swing.JLabel();
        jEtiquetaApe = new javax.swing.JLabel();
        jEtiquetaFecha = new javax.swing.JLabel();
        jLabelErrorDNI = new javax.swing.JLabel();
        jDAlumnoFechaNac = new com.toedter.calendar.JDateChooser();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jtablaAlumnoResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtablaAlumnoResultado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtablaAlumnoResultadoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtablaAlumnoResultado);

        jLabel1.setText("Ingrese el DNI");
        jLabel1.setFocusable(false);

        jtAlumnoDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtAlumnoDNIKeyReleased(evt);
            }
        });

        jbtAlumnoNuevo.setText("Alumno Nuevo");
        jbtAlumnoNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAlumnoNuevoActionPerformed(evt);
            }
        });

        jLabel2.setText("Identificador");
        jLabel2.setFocusable(false);

        jLabelAlumnoID.setFocusable(false);

        jLabel4.setText("Nombre");
        jLabel4.setFocusable(false);

        jtAlumnoNom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtAlumnoNomKeyPressed(evt);
            }
        });

        jLabel5.setText("Apellido");
        jLabel5.setFocusable(false);

        jtAlumnoApe.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtAlumnoApeFocusGained(evt);
            }
        });
        jtAlumnoApe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtAlumnoApeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtAlumnoApeKeyReleased(evt);
            }
        });

        jLabel6.setText("Fecha Nac.");
        jLabel6.setFocusable(false);

        jLabel7.setText("Estado");
        jLabel7.setFocusable(false);

        jcbAlumnoEstado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jcbAlumnoEstadoFocusGained(evt);
            }
        });

        jbtAlumnoAgregar.setText("Agregar");
        jbtAlumnoAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAlumnoAgregarActionPerformed(evt);
            }
        });

        jbtAlumnoModificar.setText("Modificar");
        jbtAlumnoModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAlumnoModificarActionPerformed(evt);
            }
        });

        jbtAlumnoCancelar.setText("Cancelar");
        jbtAlumnoCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAlumnoCancelarActionPerformed(evt);
            }
        });

        jEtiquetaNom.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        jEtiquetaNom.setForeground(new java.awt.Color(255, 51, 51));
        jEtiquetaNom.setFocusable(false);

        jEtiquetaApe.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        jEtiquetaApe.setForeground(new java.awt.Color(255, 51, 51));
        jEtiquetaApe.setFocusable(false);

        jEtiquetaFecha.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        jEtiquetaFecha.setForeground(new java.awt.Color(255, 51, 51));
        jEtiquetaFecha.setFocusable(false);

        jLabelErrorDNI.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        jLabelErrorDNI.setForeground(new java.awt.Color(255, 51, 51));

        jDAlumnoFechaNac.setDateFormatString("yyyy-MM-dd");
        jDAlumnoFechaNac.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jDAlumnoFechaNacFocusGained(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jEtiquetaFecha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jDAlumnoFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 28, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbAlumnoEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(268, 268, 268)
                                .addComponent(jbtAlumnoAgregar)
                                .addGap(18, 18, 18)
                                .addComponent(jbtAlumnoModificar)
                                .addGap(18, 18, 18)
                                .addComponent(jbtAlumnoCancelar))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelAlumnoID, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(jtAlumnoNom, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(jtAlumnoApe, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jEtiquetaNom, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jEtiquetaApe, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jtAlumnoDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jbtAlumnoNuevo))
                                    .addComponent(jLabelErrorDNI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtAlumnoDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtAlumnoNuevo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelErrorDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jtAlumnoNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jtAlumnoApe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabelAlumnoID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jEtiquetaNom, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jEtiquetaApe, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jLabel7)
                        .addComponent(jcbAlumnoEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDAlumnoFechaNac, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jEtiquetaFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtAlumnoAgregar)
                    .addComponent(jbtAlumnoModificar)
                    .addComponent(jbtAlumnoCancelar))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtAlumnoModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAlumnoModificarActionPerformed
        // Actualizo datos de el alumno seleccionado
        temp = new Alumno();
        try {
            int idAlu = Integer.parseInt(jLabelAlumnoID.getText());
            temp.setIdAlumno(idAlu);
            temp.setApellido(jtAlumnoApe.getText());
            temp.setNombre(jtAlumnoNom.getText());
            int dnialu = Integer.parseInt(jtAlumnoDNI.getText());
            temp.setDni(dnialu);
            int valor = jcbAlumnoEstado.getSelectedIndex();
            boolean activo = false;
            if (valor == 0) {
                activo = true;
            }
            temp.setEstado(activo);
            SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
            Date fec = jDAlumnoFechaNac.getDate();
            String valorFecha = formato.format(fec);
            LocalDate fech = LocalDate.parse(valorFecha);
            temp.setFechaNacimiento(fech);
            abmData.modificarAlumno(temp);
            resetearCampos();
            camposInicial();
            borroFilas();
            JOptionPane.showMessageDialog(this, "Se ha modificado el Alumno");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Muestro el mensaje " + e.getMessage());
        }


    }//GEN-LAST:event_jbtAlumnoModificarActionPerformed

    private void jtAlumnoDNIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtAlumnoDNIKeyReleased
        // Procedimiento para la búsque de los alumnos por dni. En le caso de que no exista se puede agregar, si existe
        // se puede modificar
        borroFilas();
        camposInicial();
        String ingresoDNI = jtAlumnoDNI.getText();
        String dniEnFor = "";
        char[] vectorDNi = ingresoDNI.toCharArray();
        listaAlumnos = abmData.listarAlumnos();
        jLabelErrorDNI.setText("");
        for (int i = 0; i < vectorDNi.length; i++) {
//            System.out.println(" muestro los caracteres " + vectorDNi[i]);
            dniEnFor = String.valueOf(vectorDNi[i]);
            if (!dniEnFor.toLowerCase().matches("[0-9]*")) {
                jLabelErrorDNI.setForeground(Color.RED.darker());
                Font miFuente = new Font("Liberation Sans", Font.BOLD, 10);
                jLabelErrorDNI.setFont(miFuente);
                jLabelErrorDNI.setText("No puede ingresar letras o símbolos");
                camposInicial();
                break;
            } else {
                jLabelErrorDNI.setText("");
                if (ingresoDNI.isEmpty()) {
                    borroFilas();
                } else {
                    borroFilas();
                    for (Alumno alum : listaAlumnos) {
                        String dniCadena = String.valueOf(alum.getDni());
                        if (dniCadena.startsWith(ingresoDNI)) {
                            modelo.addRow(new Object[]{alum.getIdAlumno(), alum.getNombre(), alum.getApellido(),
                                alum.getFechaNacimiento(), alum.getDni(), alum.isEstado()});
                        }
                    }
                    if (modelo.getRowCount() == 0 && ingresoDNI.length() >= 8) {
                        jbtAlumnoNuevo.setEnabled(true);
                        jLabelErrorDNI.setForeground(Color.GREEN.darker());
                        Font miFuente = new Font("Liberation Sans", Font.BOLD, 10);
                        jLabelErrorDNI.setFont(miFuente);
                        jLabelErrorDNI.setText("El DNI es valido");
                    } else if (modelo.getRowCount() == 0 && ingresoDNI.length() < 8) {
                        jLabelErrorDNI.setForeground(Color.YELLOW.darker());
                        Font miFuente = new Font("Liberation Sans", Font.BOLD, 10);
                        jLabelErrorDNI.setFont(miFuente);
                        jLabelErrorDNI.setText("El DNI no existe. Complete el número para agregarlo");
                    } 
                }
            }
        }
    }//GEN-LAST:event_jtAlumnoDNIKeyReleased

    private void jbtAlumnoNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAlumnoNuevoActionPerformed
        // Este procedimietno habilita los campos para agregar un alumno
        habitoCampos();
    }//GEN-LAST:event_jbtAlumnoNuevoActionPerformed

    private void jtAlumnoNomKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtAlumnoNomKeyPressed
        // Cuando se escribe algo en el campo nombre borro la advertencia
        if (!jEtiquetaNom.getText().isEmpty()) {
            jEtiquetaNom.setText("");
        }
    }//GEN-LAST:event_jtAlumnoNomKeyPressed

    private void jtAlumnoApeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtAlumnoApeKeyPressed
        // Cuando se escribe algo en el campo apellido borro la advertencia si es que está
        if (!jEtiquetaApe.getText().isEmpty()) {
            jEtiquetaApe.setText("");
        }
    }//GEN-LAST:event_jtAlumnoApeKeyPressed

    private void jtAlumnoApeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtAlumnoApeFocusGained
        // chequeo que el campo anterios (nombre) no este vacío
        if (jtAlumnoNom.getText().isEmpty()) {
            jEtiquetaNom.setText("El campo NOMBRE no pueda estar vacío");
            jtAlumnoNom.requestFocus();
        }
    }//GEN-LAST:event_jtAlumnoApeFocusGained

    private void jcbAlumnoEstadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jcbAlumnoEstadoFocusGained
        // chequeo que el campo anterior (fecha de nacimiento) no este vacío
        if (jDAlumnoFechaNac.getCalendar() == null) {
            jEtiquetaFecha.setText("El campo FECHA DE NACIMIENTO no puede estar vacío");
            jDAlumnoFechaNac.requestFocus();
        } else {
            if(modelo.getRowCount()==0){
                jEtiquetaFecha.setText("");
                jbtAlumnoAgregar.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jcbAlumnoEstadoFocusGained

    private void jbtAlumnoAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAlumnoAgregarActionPerformed
        // construyo el alumno para agregar a la base de datos
        // nombre,apellido,dni,fechaNacimiento,estado
        int castDNI = Integer.parseInt(jtAlumnoDNI.getText());
        Date fecha = jDAlumnoFechaNac.getDate();
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
        String valor = formato.format(fecha);
        LocalDate castFecha = LocalDate.parse(valor);
        int valorCombo = jcbAlumnoEstado.getSelectedIndex();
        boolean activo = false;
        if (valorCombo == 0) {
            activo = true;
        }
        temp = new Alumno();
        temp.setNombre(jtAlumnoNom.getText());
        temp.setApellido(jtAlumnoApe.getText());
        temp.setDni(castDNI);
        temp.setFechaNacimiento(castFecha);
        temp.setEstado(activo);
        abmData.guardarAlumno(temp);
        resetearCampos();
        camposInicial();
    }//GEN-LAST:event_jbtAlumnoAgregarActionPerformed

    private void resetearCampos() {
        jtAlumnoDNI.requestFocus();
        jtAlumnoDNI.selectAll();
        jtAlumnoApe.setText("");
        jtAlumnoNom.setText("");
        jLabelAlumnoID.setText("");
        jDAlumnoFechaNac.setDate(null);
    }

    private void jbtAlumnoCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAlumnoCancelarActionPerformed
        // este procedimiento borra todos los campos 
        jtAlumnoNom.setText("");
        jtAlumnoApe.setText("");
        //jDAlumnoFechaNac.setText("");
        jLabelAlumnoID.setText("");
        jtAlumnoDNI.setText("");
        jtAlumnoDNI.requestFocus();
        borroFilas();
        camposInicial();
    }//GEN-LAST:event_jbtAlumnoCancelarActionPerformed

    private void jtablaAlumnoResultadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtablaAlumnoResultadoMouseClicked
        try {
            // este procedimiento toma los valores de un alumno seleccionado en la tabla
            // y los carga en los campos para dar la posibilidad de modificarlos
            jbtAlumnoNuevo.setEnabled(false);
            //cargoCombo();
            int valor = jtablaAlumnoResultado.getSelectedRow();
            String tomoID = String.valueOf(modelo.getValueAt(valor, 0));
            String tomoNom = String.valueOf(modelo.getValueAt(valor, 1));
            String tomoApe = String.valueOf(modelo.getValueAt(valor, 2));
            String tomoFecha = String.valueOf(modelo.getValueAt(valor, 3));
            String tomoDNI = String.valueOf(modelo.getValueAt(valor, 4));
            String tomoEstado = String.valueOf(modelo.getValueAt(valor, 5));
            SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
            Date castFecha = formato.parse(tomoFecha);
            jLabelAlumnoID.setText(tomoID);
            jtAlumnoDNI.setText(tomoDNI);
            jtAlumnoNom.setText(tomoNom);
            jtAlumnoApe.setText(tomoApe);
            jDAlumnoFechaNac.setDate(castFecha);
            if (tomoEstado.equals("true")) {
                jcbAlumnoEstado.setSelectedIndex(0);
            } else {
                jcbAlumnoEstado.setSelectedIndex(1);
            }
            jbtAlumnoModificar.setEnabled(true);
            habitoCampos();
        } catch (ParseException ex) {
            Logger.getLogger(GestionAlumnos.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jtablaAlumnoResultadoMouseClicked

    private void jDAlumnoFechaNacFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDAlumnoFechaNacFocusGained
        // chequeo que el campo apellido no este vacío
        if (jtAlumnoApe.getText().isEmpty()) {
            jEtiquetaApe.setText("El campo APELLIDO no puede estar vacío");
            jtAlumnoApe.requestFocus();
        }
    }//GEN-LAST:event_jDAlumnoFechaNacFocusGained

    private void jtAlumnoApeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtAlumnoApeKeyReleased
        // si se empieza a escribir borro el mensaje
        if (!jtAlumnoApe.getText().isEmpty()) {
            jEtiquetaApe.setText("");
        }
    }//GEN-LAST:event_jtAlumnoApeKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser jDAlumnoFechaNac;
    private javax.swing.JLabel jEtiquetaApe;
    private javax.swing.JLabel jEtiquetaFecha;
    private javax.swing.JLabel jEtiquetaNom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelAlumnoID;
    private javax.swing.JLabel jLabelErrorDNI;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtAlumnoAgregar;
    private javax.swing.JButton jbtAlumnoCancelar;
    private javax.swing.JButton jbtAlumnoModificar;
    private javax.swing.JButton jbtAlumnoNuevo;
    private javax.swing.JComboBox<String> jcbAlumnoEstado;
    private javax.swing.JTextField jtAlumnoApe;
    private javax.swing.JTextField jtAlumnoDNI;
    private javax.swing.JTextField jtAlumnoNom;
    private javax.swing.JTable jtablaAlumnoResultado;
    // End of variables declaration//GEN-END:variables

    private void camposInicial() {
        jbtAlumnoNuevo.setEnabled(false);
        jtAlumnoNom.setEnabled(false);
        jtAlumnoApe.setEnabled(false);
        jDAlumnoFechaNac.setEnabled(false);
        jcbAlumnoEstado.setEnabled(false);
        jbtAlumnoAgregar.setEnabled(false);
        jbtAlumnoModificar.setEnabled(false);
       
        jtAlumnoDNI.requestFocus();
    }

    private void habitoCampos() {
        jtAlumnoNom.setEnabled(true);
        jtAlumnoApe.setEnabled(true);
        jDAlumnoFechaNac.setEnabled(true);
        jcbAlumnoEstado.setEnabled(true);
    }

    private void armarTabla() {
        modelo.addColumn("Id");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido");
        modelo.addColumn("Fecha Nac.");
        modelo.addColumn("DNI");
        modelo.addColumn("Estado");
        jtablaAlumnoResultado.setModel(modelo);
    }

    private void borroFilas() {
        int num = modelo.getRowCount() - 1;
        for (int i = num; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    public void cargoCombo() {
        jcbAlumnoEstado.addItem("Activo");
        jcbAlumnoEstado.addItem("Inactivo");
    }
}
